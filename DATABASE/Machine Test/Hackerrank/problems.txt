In this HackerRank Python If - Else problem-solution set, Given an integer, n, perform the following conditional actions:

If n is odd, print Weird
If n is even and in the inclusive range of 2 to 5, print Not Weird
If n is even and in the inclusive range of 6 to 20, print Weird
If n is even and greater than 20, print Not Weird

import sys


N = int(raw_input().strip())

if (N%2):
    print ("Weird")
elif (N>=2 and N<=5):
    print ("Not Weird")
elif (N>=6 and N<=20):
    print ("Weird")
else: print ("Not Weird")


------------------------------------------------------------------------------


def is_leap(year):
    
    leap = False    
    
    if (year % 400 == 0) and (year % 100 == 0):        
    
        leap = True
   
    elif (year % 4 ==0) and (year % 100 != 0):        
        
        leap = True
    
    else:      
        pass
    
    return leap

year = int(input())
print(is_leap(year))


------------------------------------------------------------


if __name__ == '__main__':
    n = int(input())
    
    for i in range (1, n+1):
        print(i,end='')


----------------------------------------------------------

# Enter your code here. Read input from STDIN. Print output to STDOUT
from html.parser import HTMLParser
class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):        
        print ('Start :',tag)
        for ele in attrs:
            print ('->',ele[0],'>',ele[1])
            
    def handle_endtag(self, tag):
        print ('End   :',tag)
        
    def handle_startendtag(self, tag, attrs):
        print ('Empty :',tag)
        for ele in attrs:
            print ('->',ele[0],'>',ele[1])
            
MyParser = MyHTMLParser()
MyParser.feed(''.join([input().strip() for _ in range(int(input()))]))

---------------------------------------------------------------------------


# Enter your code here. Read input from STDIN. Print output to STDOUT
from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_comment(self, data):
        if '\n' not in data:
            print('>>> Single-line Comment')
            print(data)
        elif '\n' in data:
            print('>>> Multi-line Comment')
            print(data)
    def handle_data(self, data):
        if data != '\n':
            print('>>> Data')
            print(data)
html = ""       
for i in range(int(input())):
    html += input().rstrip()
    html += '\n'

parser = MyHTMLParser()
parser.feed(html)
parser.close()

---------------------------------------------------------------

# Enter your code here. Read input from STDIN. Print output to STDOUT
from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print(tag)
        for attr in attrs:
            print(f'-> {attr[0]} > {attr[1]}')
    
    def handle_startendtag(self, tag, attrs):
        print(tag)
        for attr in attrs:
            print(f'-> {attr[0]} > {attr[1]}')

parser = MyHTMLParser()
for _ in range(int(input())):
    parser.feed(input())

-------------------------------------------------------------------

# Enter your code here. Read input from STDIN. Print output to STDOUT
import re

for i in range(int(input())):
    N = input().strip()
    if N.isalnum() and len(N) == 10:
        if bool(re.search(r'(.*[A-Z]){2,}',N)) and bool(re.search(r'(.*[0-9]){3,}',N)):
            if re.search(r'.*(.).*\1+.*',N):
                print('Invalid')
            else:
                print('Valid')
        else:
            print('Invalid')
    else:
        print('Invalid')

-----------------------------------------------------------------

# Enter your code here. Read input from STDIN. Print output to STDOUT
import re

# compile the patterns
pattern = re.compile(
    r'^'
    r'(?!.*(\d)(-?\1){3})'
    r'[456]\d{3}'
    r'(?:-?\d{4}){3}'
    r'$')

# using for loop to the input from user 
for _ in range(int(input().strip())):
    
    #using pattern to search if the number is valid
    print('Valid' if pattern.search(input().strip()) else 'Invalid')

-----------------------------------------------------------------------

if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    
    lsti = []
    lstj = []
    lstk = []
    lstc = []

    lsti = [i for i in range(x+1)]
    lstj = [j for j in range(y+1)]
    lstk = [k for k in range(z+1)]

    lstc =[[i, j, k] for i in lsti for j in lstj for k in lstk if i+j+k!=n]


    print(lstc)

------------------------------------------------------------------

if __name__ == '__main__':
    n = int(input())    
    arr = list(map(int, input().split()))
    arr1 = set(arr)
    arr2 = sorted(arr1)
    print(arr2[-2])



-------------------------------------------------


if __name__ == '__main__':
    alist = []
    for i in range(int(input())):
        name = input()
        score = float(input())
        alist.append([name, score])
second_highest = sorted(set([score for name, score in alist]))[1]
print('\n'.join(sorted([name for name, score in alist if score == second_highest])))


-----------------------------------------


if __name__ == '__main__':

    n = int(input())

    student_marks = {}

    for _ in range(n):

        name, *line = input().split()

        scores = list(map(float, line))

        student_marks[name] = scores

    query_name = input()

    l1 = list(student_marks[query_name]) 

    addition = sum(l1)

    result = addition/len(l1)

    print('%.2f'% result)


    ---------------------------------------

    # Enter your code here. Read input from STDIN. Print output to STDOUT
from itertools import product

input_A = list(map(int, input().split()))
input_B = list(map(int, input().split()))

print(*list(product(input_A, input_B)))

----------------------------------------

from itertools import permutations
str1, int1 = input().split()

for i in sorted(permutations(str1, int(int1))):
    print (''.join(i))

-------------------------------------------------

from itertools import combinations
word , length  = input().split()
for i in range(1, int(length)+1):
    for j in combinations(sorted(word), i):
        print (''.join(j))

--------------------------------------------------

from itertools import combinations_with_replacement

io = input().split();
char = sorted(io[0]);
N = int(io[1]);

for i in combinations_with_replacement(char,N):
    print(''.join(i));

------------------------------------------

from itertools import *

io = input()
for i,j in groupby(map(int,list(io))):
    print(tuple([len(list(j)), i]) ,end = " ")

---------------------------------------

from itertools import product

K, M = map(int,input().split())

N = (list(map(int, input().split()))[1:] for _ in range(K))

max_lst = []
for item in product(*N):
    S = 0
    for val in item:
        S += val**2
    S_max = S % M
    max_lst.append(S_max)
    
print(max(max_lst))

------------------------------------------------